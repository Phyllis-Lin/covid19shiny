arrange(-total_cases)
# Read data
summary_df <- coronavirus %>%
group_by(country,type) %>%
summarise(total_cases = sum(cases)) %>%
arrange(-total_cases)%>%
filter(country %in% c("China","US","Italy","Spain","Belgium","Korean","Japan","England","Australia"))
View(summary_df)
write.csv(summary_df,"summary.csv")
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
sum <- read.csv("summary.csv")
View(sum)
output$plot_col <- renderPlot({
ggplot(data = filter(sum, country %in% input$Country,
type %in% input$Type))+
geom_bar(aes(x=country, y= total_cases, color=country))
})
runApp('APP')
View(ui)
runApp('APP')
runApp('APP')
runApp('APP')
sum <- read.csv("summary.csv") %>%
as.data.frame()
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
library(dplyr)
runApp('APP')
runApp('APP')
View(coun)
coun$date %>% as.Date()
coun <- read.csv("coun.csv")
coun$date %>% as.Date(coun$date)
runApp('APP')
runApp('APP')
runApp('APP')
ggplot(data = filter(sum, country %in% input$Country,
type %in% input$Type))+
geom_col(aes(x=country, y= total_cases))
runApp('APP')
runApp('APP')
runApp('APP')
# Load the library
library(shiny)
library(ggplot2)
library(plotly)
library(tidyverse)
library(dplyr)
coun <- read.csv("coun.csv")
View(coun)
# Load the library
library(shiny)
library(ggplot2)
library(plotly)
library(tidyverse)
library(dplyr)
type <- read.csv("type.csv")
View(type)
type <- read.csv("type.csv")%>%
as.data.frame()
type$date %>% as.Date(coun$date, format = "%Y-%m-%d")
View(type)
type <- read.csv("type.csv")%>%
as.data.frame()%>%
select(-X)
View(type)
# Load the library
library(shiny)
library(ggplot2)
library(plotly)
library(tidyverse)
library(dplyr)
var <- read.csv("type.csv")%>%
as.data.frame()%>%
select(-X)
var$date %>% as.Date(var$date, format = "%Y-%m-%d")
# Define UI for the application that draw a geom line
ui <- fluidPage(
# Application title
titlePanel("COVID-19 in main countries"),
# Sidebar with a silder input for number of lines
sidebarPanel(selectInput("Type", "Type:",
c("confirmed",
"death",
"recovered")),
dateRangeInput("Daterange", "Select the date range:",
start = "2020-01-22", end = "2020-07-31",
min = "2020-01-22", max ="2020-07-31" ),
checkboxGroupInput("Country","Please choose one or multiple countries",
choices = c("China",
"US",
"Italy",
"Spain",
"Belgium",
"Korean",
"Japan",
"England",
"Australia"))),
plotOutput("plot_line"))
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
output$dateRange <- renderUI({
dateRangeInput("Daterange", "Select the date range:",
start = "2020-01-22", end = "2020-07-31",
min = "2020-01-22", max ="2020-07-31" )
})
# Define UI for the application that draw a geom line
ui <- fluidPage(
# Application title
titlePanel("COVID-19 in main countries"),
uiOutput("Daterange"),
# Sidebar with a silder input for number of lines
sidebarPanel(selectInput("Type", "Type:",
c("confirmed",
"death",
"recovered")),
checkboxGroupInput("country","Please choose one or multiple countries",
choices = c("China",
"US",
"Italy",
"Spain",
"Belgium",
"Korean",
"Japan",
"England",
"Australia"))),
plotOutput("plot_line"))
server <- function(input, output,session) {
output$dateRange <- renderUI({
dateRangeInput("Daterange", "Select the date range:",
start = "2020-01-22", end = "2020-07-31",
min = "2020-01-22", max ="2020-07-31" )
})
output$plot_line <- renderPlot({
ggplot(var = filter(country = input$country,
type = input$Type), se = FALSE)
date >= input$Daterange[1],
date <= input$Daterange[2],+
geom_line(aes(x=date, y= type, color=country))
})
}
runApp('APP')
runApp('APP')
# Load the library
library(shiny)
library(ggplot2)
library(plotly)
library(tidyverse)
library(dplyr)
var <- read.csv("type.csv")%>%
as.data.frame()%>%
select(-X)
View(var)
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
# Load the library
library(shiny)
library(ggplot2)
library(plotly)
library(tidyverse)
library(dplyr)
var <- read.csv("type.csv")%>%
as.data.frame()%>%
select(-X)
View(var)
runApp('APP')
runApp('APP')
runApp('APP')
View(var)
runApp('APP')
View(var)
runApp('APP')
shiny::runApp('APP')
library(shinydashboard)
View(var)
shiny::runApp('APP')
runApp('APP')
library(leaflet)
runApp('APP')
runApp('APP')
runApp()
runApp('APP')
runApp('APP')
coun <- coronavirus %>% filter(country%in%c("China",
"US",
"Italy",
"Spain",
"Belgium",
"Korean",
"Japan",
"England",
"Australia",
"Germany"))%>%
group_by(type,date,country,cases, province,long,lat) %>%
summarise()
library(tidyverse)
library(coronavirus)
library(plotly)
library(leaflet)
data("coronavirus")
coun <- coronavirus %>% filter(country%in%c("China",
"US",
"Italy",
"Spain",
"Belgium",
"Korean",
"Japan",
"England",
"Australia",
"Germany"))%>%
group_by(type,date,country,cases, province,long,lat) %>%
summarise()
View(coun)
map <- coronavirus %>% filter(country%in%c("China",
"US",
"Italy",
"Spain",
"Belgium",
"Korean",
"Japan",
"England",
"Australia",
"Germany"))%>%
group_by(type,date,country,cases, province,long,lat) %>%
summarise()
library(tidyverse)
library(coronavirus)
library(plotly)
library(leaflet)
data("coronavirus")
map <- coronavirus %>%
filter(country%in%c("China",
"US",
"Italy",
"Spain",
"Belgium",
"Korean",
"Japan",
"England",
"Australia",
"Germany"))%>%  # select 10 main countries in coronavirus
group_by(type,date,country,cases, province,long,lat) %>%
summarise()
# write.csv(map,"map.csv")
# save the package data as csv file
tidy <- coronavirus %>%
group_by(type, date, country) %>%  # group coronavirus by type, date, country
summarise(total_cases = sum(cases)) %>% # sum the cases after grouping
pivot_wider(names_from = type, values_from = total_cases) %>% # change the table type into wider
arrange(date) # arrange the date from early to latest
# write.csv(tidy,"tidy.csv")
map1 <- map %>% filter(date== "2020-02-10") %>%
leaflet() %>%   # add map
addTiles() %>%
addCircleMarkers(     # add circle Markers in map according the cases number
lng          = ~long,
lat          = ~lat,
radius       = ~log(cases^2),
stroke       = FALSE,
color        =  "#005900",
fillOpacity  = 0.5,
label        = ~country,
labelOptions = labelOptions(textsize = 15)
)
plot <- map  %>% filter(type == "confirmed",
country == "China") %>%
ggplot(aes(x = date, y= cases, color = country)) +
geom_col() +
theme(axis.title.x=element_blank(), # clear x-ais as the date range have plenty of ovservations.
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
dtable <- DT::datatable(tidy, options = list(pageLength = 5), width = "500px", caption = "Comparison betwee US and China from March to July")
dtable
plot
map1
library(tidyverse)
library(coronavirus)
library(plotly)
library(leaflet)
dtable <- DT::datatable(tidy, options = list(pageLength = 5))
dtable
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
library(DT)
# Load the library
library(shiny)
library(ggplot2)
library(plotly)
library(tidyverse)
library(tidyr)
library(shinydashboard)
library(leaflet)
library(shinythemes)
# Import data
map <- read.csv("map.csv")
coun <- read.csv("coun.csv")
tidy <- read.csv("type.csv")
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
View(coun)
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
# plot output
output$plot <- renderPlotly({
coun %>% filter(type == input[Type],
country == input[Country])%>%
filter(date >= as.Date(input[Daterange[1]]) &  # apply the date range chosen
date <= as.Date(input[Daterange[2]]))%>%
plot_ly(aes(x = date, y= cases, color = country)) +
geom_col() +
theme(axis.title.x=element_blank(), # clear x-ais as the date range have plenty of ovservations.
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
})
runApp('APP')
runApp('APP')
library(plotly)
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp()
runApp('APP')
runApp('APP')
shiny::runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
map <- read.csv("map.csv") %>%
dplyr::select(-X)
View(map)
map <- read.csv("map.csv") %>%
as.data.frame()
coun <- read.csv("coun.csv")%>%
as.data.frame()
View(coun)
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
?box
?shinydashboard::box
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
View(map)
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
plot <-  map %>% filter(type == input$Type2,
country == input$Country)%>%
filter(date >= as.Date(input$Daterange[1]) &  # apply the date range chosen
date <= as.Date(input$Daterange[2]))%>%
ggplot(aes(x = date, y= cases, color = country)) +
geom_col() +
theme(axis.title.x=element_blank(), # clear x-ais as the date range have plenty of ovservations.
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
scale_fill_manual()
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
library(shinycssloaders)
install.packages("shinycssloaders")
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
runApp('APP')
shiny::runApp('APP')
